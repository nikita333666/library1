<?php
// Объявление PHP кода

// Определение пространства имен для модели
namespace app\models;

// Импорт основного класса Yii
use Yii;
// Импорт базового класса Model
use yii\base\Model;
// Импорт модели пользователя
use app\models\User;

/**
 * Класс модели формы регистрации пользователя
 * Обрабатывает регистрацию новых пользователей в системе
 */
class SignupForm extends Model
{
    // Имя пользователя
    public $username;
    // Email пользователя
    public $email;
    // Пароль пользователя
    public $password;
    // Подтверждение пароля
    public $password_repeat;

    /**
     * Определение правил валидации полей формы
     */
    public function rules()
    {
        // Возвращает массив правил валидации
        return [
            // Удаление пробелов в начале и конце имени пользователя
            ['username', 'trim'],
            // Проверка обязательности заполнения имени пользователя
            ['username', 'required', 'message' => 'Пожалуйста, введите имя пользователя'],
            // Проверка уникальности имени пользователя
            ['username', 'unique', 'targetClass' => User::class, 'message' => 'Это имя пользователя уже занято.'],
            // Ограничение длины имени пользователя
            ['username', 'string', 'min' => 2, 'max' => 255],

            // Удаление пробелов в начале и конце email
            ['email', 'trim'],
            // Проверка обязательности заполнения email
            ['email', 'required', 'message' => 'Пожалуйста, введите email'],
            // Проверка корректности формата email
            ['email', 'email', 'message' => 'Пожалуйста, введите корректный email'],
            // Ограничение длины email
            ['email', 'string', 'max' => 255],
            // Проверка уникальности email
            ['email', 'unique', 'targetClass' => User::class, 'message' => 'Этот email уже зарегистрирован.'],

            // Проверка обязательности заполнения пароля
            ['password', 'required', 'message' => 'Пожалуйста, введите пароль'],
            // Проверка минимальной длины пароля
            ['password', 'string', 'min' => 6, 'message' => 'Пароль должен содержать минимум 6 символов'],
            
            // Проверка обязательности заполнения подтверждения пароля
            ['password_repeat', 'required', 'message' => 'Пожалуйста, повторите пароль'],
            // Проверка совпадения паролей
            ['password_repeat', 'compare', 'compareAttribute' => 'password', 'message' => 'Пароли не совпадают'],
        ];
    }

    /**
     * Определение пользовательских названий атрибутов
     */
    public function attributeLabels()
    {
        // Возвращает массив меток атрибутов
        return [
            'username' => 'Имя пользователя', // Метка для поля имени пользователя
            'email' => 'Email', // Метка для поля email
            'password' => 'Пароль', // Метка для поля пароля
            'password_repeat' => 'Повторите пароль', // Метка для поля подтверждения пароля
        ];
    }

    /**
     * Метод регистрации нового пользователя
     * @return User|null - объект пользователя или null в случае ошибки
     */
    public function signup()
    {
        // Проверка валидности данных формы
        if (!$this->validate()) {
            return null;
        }

        // Создание нового объекта пользователя
        $user = new User();
        // Установка имени пользователя
        $user->username = $this->username;
        // Установка email пользователя
        $user->email = $this->email;
        // Хеширование и установка пароля
        $user->setPassword($this->password);
        // Установка флага администратора (по умолчанию не админ)
        $user->is_admin = 0;

        // Сохранение пользователя и возврат результата
        return $user->save() ? $user : null;
    }
}
